# bot.py
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.filters import Command
import datetime
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8326145485:AAGdTFDqyAXwY0A6HmF8vP5hoRbaU-k2Rfg"
TOKEN = os.getenv("BOT_TOKEN")  # ‚ö†Ô∏è –°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í ===
print("üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:", os.listdir("."))

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
def log_event(user_id: int, username: str, action: str):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) ‚Üí {action}")

# === –ë–ê–ó–ê –¢–û–í–ê–†–û–í ===
from products import PRODUCTS as products

# === –ö–û–†–ó–ò–ù–ê –ò –ó–ê–ö–ê–ó–´ ===
cart = {}  # cart[user_id] = [{"brand": "Nike", "product": product, "index": 0}, ...]
active_orders = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

# === –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–û–í ===
ADMIN_IDS = {7335580942}  # ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä: {7335580942, 123456789}

# === –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ê–î–ú–ò–ù–ê–ú ===
async def notify_admins(text: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, parse_mode="Markdown")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ) ===
def main_menu(user_id: int):
    buttons = [
        [InlineKeyboardButton(text="üõç –°–¥–µ–ª–∞—Ç—å –ó–∞–∫–∞–∑", callback_data="menu_order")],
        [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton(text="üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ö–∞–Ω–∞–ª", callback_data="menu_channel")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑—å", callback_data="menu_contact")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_orders_page_0")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –°–ï–¢–ö–ê –ë–†–ï–ù–î–û–í (2 –≤ —Å—Ç—Ä–æ–∫–µ) ===
def get_brands_keyboard():
    brands = list(products.keys())
    keyboard = []
    for i in range(0, len(brands), 2):
        row = [
            InlineKeyboardButton(
                text=f"{brands[i]} [{len(products[brands[i]])}]",
                callback_data=f"brand_{brands[i]}"
            )
        ]
        if i + 1 < len(brands):
            row.append(InlineKeyboardButton(
                text=f"{brands[i+1]} [{len(products[brands[i+1]])}]",
                callback_data=f"brand_{brands[i+1]}"
            ))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# === –ö–ù–û–ü–ö–ò –¢–û–í–ê–†–ê ===
def get_product_keyboard(brand: str, index: int):
    total = len(products[brand])
    buttons = []

    # –õ–∏—Å—Ç–∞–Ω–∏–µ
    if total > 1:
        nav_buttons = []
        if index > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{brand}_{index}"))
        if index < total - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{brand}_{index}"))
        if nav_buttons:
            buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{brand}_{index}")])

    # –ö–æ—Ä–∑–∏–Ω–∞ –∏ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_brands")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === /start ===
@dp.message(Command("start"))
async def start(message: Message):
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    log_event(message.from_user.id, user_name, "–ù–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (/start)")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Mayka Shop*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(message.from_user.id),
        parse_mode="Markdown"
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ ===
@dp.callback_query(F.data.startswith("menu_"))
async def handle_menu(call: CallbackQuery):
    user_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    log_event(call.from_user.id, user_name, f"–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {call.data}")
    await call.answer()

    if call.data == "menu_order":
        try:
            await call.message.edit_media(media=None)
        except:
            pass
        await call.message.edit_text("üíº –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=get_brands_keyboard())

    elif call.data == "menu_channel":
        channel_link = "https://t.me/maykashop"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ])
        try:
            await call.message.edit_media(media=None)
        except:
            pass
        await call.message.edit_text("üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    elif call.data == "menu_contact":
        support_link = "https://t.me/M1HCK"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=support_link)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ])
        try:
            await call.message.edit_media(media=None)
        except:
            pass
        await call.message.edit_text("üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:", reply_markup=keyboard)

    elif call.data == "menu_main":
        try:
            await call.message.edit_media(media=None)
        except:
            pass
        await call.message.edit_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Mayka Shop*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu(call.from_user.id),
            parse_mode="Markdown"
        )

# === –ü–û–ö–ê–ó –ü–ï–†–í–û–ì–û –¢–û–í–ê–†–ê ===
@dp.callback_query(F.data.startswith("brand_"))
async def show_first_product(call: CallbackQuery):
    brand = call.data.split("_", 1)[1]
    if brand not in products:
        await call.answer("–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await call.answer()
    await show_product(call, brand, 0)

# === –ü–û–ö–ê–ó –¢–û–í–ê–†–ê –° –§–û–¢–û ===
async def show_product(call: CallbackQuery, brand: str, index: int):
    product = products[brand][index]
    total = len(products[brand])
    caption = f"""
<b>üñºÔ∏è {product['name']}</b>
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product['price']}‚ÇΩ

{product['description']}
<b>üìå [{index + 1} –∏–∑ {total}]</b>

{product.get('more_photos', '')}
    """.strip()

    media = InputMediaPhoto(
        media=(product["image"]),
        caption=caption,
        parse_mode="HTML"
    )
    keyboard = get_product_keyboard(brand, index)

    try:
        await call.message.edit_media(media=media, reply_markup=keyboard)
    except Exception:
        sent = await call.message.answer_photo(
            photo=product["image"],
            caption=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await call.message.delete()

# === –õ–ò–°–¢–ê–ù–ò–ï ===
@dp.callback_query(F.data.startswith("prev_"))
async def prev_product(call: CallbackQuery):
    _, brand, index_str = call.data.split("_")
    index = int(index_str) - 1
    if index < 0:
        await call.answer()
        return
    await call.answer()
    await show_product(call, brand, index)

@dp.callback_query(F.data.startswith("next_"))
async def next_product(call: CallbackQuery):
    _, brand, index_str = call.data.split("_")
    index = int(index_str) + 1
    if index >= len(products[brand]):
        await call.answer()
        return
    await call.answer()
    await show_product(call, brand, index)

# === –í–û–ó–í–†–ê–¢ –ö –ë–†–ï–ù–î–ê–ú ===
@dp.callback_query(F.data == "back_to_brands")
async def back_to_brands(call: CallbackQuery):
    await call.answer()
    try:
        await call.message.edit_media(media=None)
    except:
        pass
    try:
        await call.message.edit_text("üíº –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=get_brands_keyboard())
    except Exception:
        sent = await call.message.answer("üíº –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=get_brands_keyboard())
        await call.message.delete()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ ===
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(call: CallbackQuery):
    _, brand, index_str = call.data.split("_")
    index = int(index_str)
    if brand not in products or index >= len(products[brand]):
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    product = products[brand][index]
    user_id = call.from_user.id
    username = call.from_user.username
    full_name = call.from_user.full_name

    if user_id not in cart:
        cart[user_id] = []

    cart[user_id].append({"brand": brand, "product": product, "index": index})

    user_link = f"@{username}" if username else f"[{full_name}](tg://user?id={user_id})"
    await notify_admins(
        f"üõí *–ù–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
        f"–ë—Ä–µ–Ω–¥: {brand}"
    )

    await call.answer(f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=False)

# === –ü–†–û–°–ú–û–¢–† –ö–û–†–ó–ò–ù–´ ===
@dp.callback_query(F.data == "view_cart")
async def view_cart_handler(call: CallbackQuery):
    user_id = call.from_user.id
    user_cart = cart.get(user_id, [])

    if not user_cart:
        await call.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total_price = sum(item["product"]["price"] for item in user_cart)
    text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    for i, item in enumerate(user_cart, 1):
        text += f"{i}. {item['product']['name']} ‚Äî {item['product']['price']}‚ÇΩ\n"
    text += f"\nüí∞ *–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ*"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_brands")]
    ])

    # –£–ë–ò–†–ê–ï–ú –§–û–¢–û –ü–ï–†–ï–î –ü–û–ö–ê–ó–û–ú –¢–ï–ö–°–¢–ê
    try:
        await call.message.edit_media(media=None)  # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        await call.message.edit_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.delete()
        except:
            pass
        await call.message.answer(text=text, reply_markup=keyboard, parse_mode="Markdown")

# === –û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´ ===
@dp.callback_query(F.data == "clear_cart")
async def clear_cart(call: CallbackQuery):
    user_id = call.from_user.id
    cart.pop(user_id, None)
    await call.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await back_to_brands(call)

# === –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===
@dp.callback_query(F.data == "checkout")
async def checkout(call: CallbackQuery):
    user_id = call.from_user.id
    user_cart = cart.get(user_id, [])
    if not user_cart:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    total_price = sum(item["product"]["price"] for item in user_cart)
    items_list = "\n".join([f"‚Ä¢ {item['product']['name']} ‚Äî {item['product']['price']}‚ÇΩ" for item in user_cart])
    username = call.from_user.username
    full_name = call.from_user.full_name
    user_link = f"@{username}" if username else f"[{full_name}](tg://user?id={user_id})"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    order = {
        "user_id": user_id,
        "username": username,
        "full_name": full_name,
        "items": user_cart.copy(),
        "total": total_price,
        "status": "new"
    }
    active_orders.append(order)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await notify_admins(
        f"‚úÖ *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{items_list}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price}‚ÇΩ"
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart.pop(user_id, None)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –î–û –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = f"""
‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*
–¢–æ–≤–∞—Ä—ã:
{items_list}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ
üì¶ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –∏ –°–ù–ì.
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üíº
    """.strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="menu_order")]
    ])

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∑–∞—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await call.message.edit_media(media=None)  # –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
        await call.message.edit_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await call.message.delete()
        except:
            pass
        await call.message.answer(text=text, reply_markup=keyboard, parse_mode="Markdown")

    await call.answer()

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô ===
@dp.callback_query(F.data.startswith("admin_orders_page_"))
async def admin_orders_page(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    page = int(call.data.split("_")[-1])

    if not active_orders:
        text = "üì¶ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤*"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_orders_page_0")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
        ])
        try:
            await call.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await call.message.delete()
            await call.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        return

    total_pages = len(active_orders)
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0

    order = active_orders[page]
    user_link = f"@{order['username']}" if order['username'] else f"[{order['full_name']}](tg://user?id={order['user_id']})"
    items_text = "\n".join([f"‚Ä¢ {item['product']['name']} ‚Äî {item['product']['price']}‚ÇΩ" for item in order['items']])

    text = f"""
üì¶ *–ó–∞–∫–∞–∑ #{page + 1} –∏–∑ {total_pages}*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}
üõí –¢–æ–≤–∞—Ä—ã:
{items_text}
üí∞ –°—É–º–º–∞: {order['total']}‚ÇΩ
    """.strip()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_orders_page_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_order_done_{page}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_orders_page_{page+1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_orders_page_0")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
    ])

    try:
        await call.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except:
        await call.message.delete()
        await call.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# === –û–¢–ú–ï–¢–ò–¢–¨ –ó–ê–ö–ê–ó –ö–ê–ö –í–´–ü–û–õ–ù–ï–ù–ù–´–ô ===
@dp.callback_query(F.data.startswith("admin_order_done_"))
async def admin_order_done(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    page = int(call.data.split("_")[-1])
    if page >= len(active_orders):
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    order = active_orders.pop(page)
    user_link = f"@{order['username']}" if order['username'] else order['full_name']

    await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
    await call.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_link} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="admin_orders_page_0")]
        ])
    )

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram 3.x")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    asyncio.run(main())